//ATENCIÓN: Este archivo contiene la función de logeo vieja echa por Juan M. Uypu Ssy
//			Actualmente no tiene utilidad dado que fue reemplazada por la
//			función provista por la cátedrea en la so-commons para el mismo fin.

//Ejemplo de uso:
//					Log logDePlanificador;
//					logDePlanificador.tipo = 0;
//					strcpy(logDePlanificador.nombreDeElemento, nombreDePlanificador);
//					strcpy(logDePlanificador.descripcion, "Iniciado");
//					logear(logDePlanificador);

//-------------------------------------------------------------------------------

//Definiciones
//Define la estructura que debe recibir la función logear para registrar un evento
typedef struct t_log {
	int tipo; //Tipo de evento, ejemplos: INFO = 0, DEBUG = 1, WARN = 2, ERROR = 3
	char nombreDeElemento[64]; //Nombre de quien genera el evento, ejemplo: THR ORQUESTADOR o THR PLANIFICADOR (NIVEL 1)
	char descripcion[128]; //Descripción del evento
} Log;

//LOGEAR:
//Función que agrega un evento al log que se encuentra en disco.
//Cardinalidad = 0 hasta N threads ejecutandose secuencialmente
//Dependencias: <unistd.h> , <sys/types.h> y "temporal.h" (de la so-commons)
void logear (Log elementoALogear) {
    char ruta[1024];//Acá se va a guardar la ruta en donde se encuentra la Plataforma

    //Obtener y revisar que la ruta actual no sea nula (se guarda en "ruta")
    if (getcwd(ruta, sizeof(ruta)) != NULL) {

    	char* cadena = malloc(512); //TODO: Optimizar la cantidad de memoria alocada

        switch(elementoALogear.tipo){
			case 0:
				strcpy(cadena,"[INFO] [");
				break;
			case 1:
				strcpy(cadena,"[DEBUG] [");
				break;
			case 2:
				strcpy(cadena,"[WARN] [");
				break;
			case 3:
				strcpy(cadena,"[ERROR] [");
				break;

			//Hay un caso default en caso de que el tipo de evento no se reconozca,
			//en tal caso se termina la ejecución del logeo usando return;
			default:
				printf("Error al logear el evento: no se reconoce el tipo\n");
				return;
        }

        //generamos una cadena con toda la información necesaria para el log
    	strcat(cadena, temporal_get_string_time() );
    	strcat(cadena, "] [");
    	strcat(cadena, elementoALogear.nombreDeElemento);
    	strcat(cadena, "]/(");

    	//Se usa cadena + (strlen(cadena) para que sprintf concatene a partir del último
    	//caracter de la cadena, sino empieza por la posición 0 y sobre escribe la cadena
    	sprintf(cadena + (strlen(cadena)), "%d",getpid()); //getpid() devuelve un int que tenemos que meter en un string, por eso usamos sprintf
    	strcat(cadena,":");
    	//TODO: Revisar porque no funciona el gettid()
    	sprintf(cadena + (strlen(cadena)),"%d):", pthread_self()));//Sucede lo mismo que con getpid()
    	strcat(cadena, elementoALogear.descripcion);
    	strcat(cadena,"\n");

    	//Abrimos el archivo log.txt para append
    	FILE *archivoLog;
    	strcat(ruta, "/log.txt");
    	archivoLog = fopen (ruta, "a");
    	fputs(cadena, archivoLog);
    	fclose (archivoLog);

    }
    else perror("Error al logear el evento: no se encuentra la ruta actual");

};
//FIN DE LOGEAR